<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="848e80bf-fe94-4165-a423-e859a1fe3dbc" activeEnvironment="Default" name="Employee Project" resourceRoot="" soapui-version="5.6.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.TestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="Export JUnit Results" value="true"/>
  <con:entry key="Export All" value="false"/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="TestSuite" value="REST Functional Test Suite"/>
  <con:entry key="Endpoint" value=""/>
  <con:entry key="Select Report Type" value=""/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Password" value=""/>
  <con:entry key="Print Report" value="true"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Export JUnit Results with test properties" value="true"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="TestCase" value="Add Employee"/>
  <con:entry key="Username" value=""/>
  <con:entry key="user-settings.xml Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="Root Folder" value="C:\Lavanya\Official\POCs\TMW\API Testing\Final\TMWDemo\Rest Service\Reports"/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Save Project" value="false"/>
</xml-fragment>]]></con:setting></con:settings><con:interface xsi:type="con:RestService" id="603c40bb-9536-4702-a25d-dc0984a76fdf" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://192.168.0.47:7090" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://192.168.0.47:7090</con:endpoint></con:endpoints><con:resource name="Employee" path="/employee" id="5dd79add-c337-4738-ba5d-67e4cdf4e48d"><con:settings/><con:parameters><con:parameter><con:name>shortname</con:name><con:value>SS363</con:value><con:style>QUERY</con:style><con:default>SS363</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Employee 1" id="9c8e261a-7053-4023-a17d-d93a7fbf2dd7" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/plain;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=ISO-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="bb24afa2-1bd9-439d-8397-a015c9dddfcf" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://192.168.0.47:7090</con:endpoint><con:request/><con:originalUri>http://192.168.0.47/employee</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="shortname" value="SR121" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>shortname</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="employee" path="/employee" id="848b64f8-3c79-4a56-8416-e85a6bf627d1"><con:settings/><con:parameters/><con:method name="Method 1" id="369ac4c6-ca00-4214-844f-5b85f1abefd1" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=ISO-8859-1</con:mediaType><con:status>400 415</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="419d7e02-070f-42e8-8de4-92ce068621d0" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://192.168.0.47:7090</con:endpoint><con:request>{
  "ShortName": "SR121",
  "FullName": "Lavanya Murali",
  "PhoneNo": "9090909090",
  "Address": "Hyderabad"
}</con:request><con:originalUri>http://192.168.0.47/employee</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:WsdlInterface" id="21ad6671-5f79-4b34-839f-b09065c75018" wsaVersion="NONE" name="SOAPServiceBinding" type="wsdl" bindingName="{http://www.example.org/wsdl/1603476554443}SOAPServiceBinding" soapVersion="1_1" anonymous="optional" definition="http://192.168.0.47:7095/SOAPServiceBinding/process/?wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://192.168.0.47:7095/SOAPServiceBinding/process/?wsdl"><con:part><con:url>http://192.168.0.47:7095/SOAPServiceBinding/process/?wsdl</con:url><con:content><![CDATA[<wsdl:definitions name="Process" targetNamespace="http://www.example.org/wsdl/1603476554443" xmlns:extns="http://www.example.org/schema/1603476554587" xmlns:bwh="http://www.tibco.com/6da6086267b74e42b7f9c6d083722528/SOAPServiceBinding" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://www.example.org/wsdl/1603476554443" xmlns:btns="http://www.example.org/schema/1603476554587" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/">
  <wsdl:types>
    <schema elementFormDefault="unqualified" targetNamespace="http://www.example.org/schema/1603476554587" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://www.example.org/schema/1603476554587">
      <element name="operationRequest">
        <complexType>
          <sequence>
            <element name="Name" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="operationResponse">
        <complexType>
          <sequence>
            <element name="Marks" type="string"/>
          </sequence>
        </complexType>
      </element>
    </schema>
  </wsdl:types>
  <wsdl:message name="operationResponse">
    <wsdl:part name="parameters" element="extns:operationResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="operationRequest">
    <wsdl:part name="parameters" element="extns:operationRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:portType name="Process">
    <wsdl:operation name="operation">
      <wsdl:input name="operationInput" message="tns:operationRequest"></wsdl:input>
      <wsdl:output name="operationOutput" message="tns:operationResponse"></wsdl:output>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="SOAPServiceBinding" type="tns:Process">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="operation">
      <soap:operation soapAction="operation" style="document"/>
      <wsdl:input>
        <soap:body parts="parameters" use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body parts="parameters" use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="Process">
    <wsdl:port name="ProcessPort" binding="tns:SOAPServiceBinding">
      <soap:address location="http://XTV-SPAREPC.HYDUS.COM:7095/SOAPServiceBinding/process/"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://XTV-SPAREPC.HYDUS.COM:7095/SOAPServiceBinding/process/</con:endpoint></con:endpoints><con:operation id="71ac3e20-f9f2-45a5-8d5b-02862ba3e214" isOneWay="false" action="operation" name="operation" bindingOperationName="operation" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="339f6be9-ffa4-42ee-9b72-f6ddfe286427" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://XTV-SPAREPC.HYDUS.COM:7095/SOAPServiceBinding/process/</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="http://www.example.org/schema/1603476554587">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <ns:operationRequest>\r
         <Name>?</Name>\r
      </ns:operationRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="operation"/><con:wsrmConfig version="1.2"/></con:call></con:operation></con:interface><con:testSuite id="51a29047-bbd9-473e-a8a2-abed677fda99" name="REST Functional Test Suite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="b4f5f503-d242-4ef6-a471-89f59981d6ff" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Add Employee" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Groovy Script - Test Data" id="916af37f-b3c1-4eb1-ba89-9d946683e0ba"><con:settings/><con:config><script>
import jxl.* //Import Java Excel library
import jxl.write.*
import com.eviware.soapui.support.XmlHolder

def TestCase = context.testCase
def FilePath =  "C:\\Lavanya\\Official\\POCs\\TMW\\API Testing\\Final\\TMWDemo\\Rest Service\\TestData_AddEmployee.xls"
def count

//XSSFWorkbook wb = new XSSFWorkbook (FilePath)
Workbook Workbook1 = Workbook.getWorkbook(new File(FilePath))
Sheet Sheet1 = Workbook1.getSheet(0)
def rowsCount = Sheet1.getRows()
def colsCount = Sheet1.getColumns()


PropertiesTestStep = TestCase.getTestStepByName("Properties")
count = PropertiesTestStep.getPropertyValue("Counter").toInteger()

//If Total records unknown (at start), get the row count from excel
if (PropertiesTestStep.getPropertyValue("Total").toString() == "")
    PropertiesTestStep.setPropertyValue("Total",Sheet1.getRows().toString())

count++


log.info (count)

//Read the excel data
Cell Field1 = Sheet1.getCell(0,count)



log.info("Count is " + count.toString() + ". TestRequest: " + Field1.getContents())
Workbook1.close()

//Copy the excel test data to properties in Properties Test step
PropertiesTestStep.setPropertyValue("TestRequest", Field1.getContents())
PropertiesTestStep.setPropertyValue("Counter", count.toString())

if(count == PropertiesTestStep.getPropertyValue("Total").toInteger() - 1)
	PropertiesTestStep.setPropertyValue("End","True")
	
</script></con:config></con:testStep><con:testStep type="restrequest" name="Method 1 - Request 1" id="f1b8c1f7-bed8-49fe-a9c1-3945b7bc6446"><con:settings/><con:config service="http://192.168.0.47:7090" resourcePath="/employee" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="419d7e02-070f-42e8-8de4-92ce068621d0" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestSuite#RestEndPointURL}</con:endpoint><con:request>${Properties#TestRequest}</con:request><con:originalUri>http://192.168.0.47/employee</con:originalUri><con:assertion type="Simple Contains" id="660b4db5-7471-44dd-9c9c-fb83074726a2" name="Contains"><con:configuration><token>Employee added successfully</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="326bd095-fd48-4a62-a3b3-e5780fa54dc3" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" id="cc4c9f6d-aef8-4c5c-8de5-8131314f2e33" name="Response SLA"><con:configuration><SLA>800</SLA></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="2602f2f2-f6fe-4ff9-9db1-5af2afb362a3" name="Invalid HTTP Status Codes"><con:configuration><codes>400,404</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="a92c4eeb-bf0a-44ac-84ee-fcf35fd07fc0" name="Script Assertion"><con:configuration><scriptText>
import jxl.* //Import Java Excel library
import jxl.write.*
import com.eviware.soapui.support.XmlHolder

def TestCase = context.testCase
PropertiesTestStep = TestCase.getTestStepByName("Properties")

def response = context.expand( '${Method 1 - Request 1#Response}' )
//Write the Response to the console
log.info response

//verify if the Employee is added successfully
if ( response.toString().trim().contains("Employee added Successfully")) 
{
	log.info("Employee Added Successfully to database.") 
	//Store the response data for Get Employee test case
	PropertiesTestStep.setPropertyValue("TestResponse",response)
}
else 
	log.info("Employee could not be added successfully" + response.toString())
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script - Data Loop" id="85713130-5e57-4d31-b222-e398ff48de14"><con:settings/><con:config><script>def TestCase = context.testCase

PropertiesTestStep = TestCase.getTestStepByName("Properties")
Stop = PropertiesTestStep.getPropertyValue("End").toString()
if(Stop =="True")
{
	log.info("Exit Groovy Script - Data Loop")
	PropertiesTestStep.setPropertyValue("Total","")
	PropertiesTestStep.setPropertyValue("TestRequest", "")
	PropertiesTestStep.setPropertyValue("Counter", "0")
	PropertiesTestStep.setPropertyValue("End", "False")
}
else
	testRunner.gotoStepByName("Groovy Script - Test Data")</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="5fd899c3-c2b9-43b9-81b5-3ab93d373210"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>Counter</con:name><con:value>0</con:value></con:property><con:property><con:name>Total</con:name><con:value/></con:property><con:property><con:name>End</con:name><con:value>False</con:value></con:property><con:property><con:name>TestRequest</con:name><con:value/></con:property><con:property><con:name>TestResponse</con:name><con:value>"Employee added Successfully{\"ShortName\":\"SR122\",\"FullName\":\"Murali\",\"PhoneNo\":\"9090909090\",\"Address\":\"Chennai\"}"</con:value></con:property></con:properties></con:config></con:testStep><con:tearDownScript>// Code to execute the GenerateCSVReport test step
testRunner.testCase.testSuite.project.testSuites["Library"].testCases["Reporting_Utility"].
testSteps["GenerateCSVReport"].run(testRunner, context);</con:tearDownScript><con:properties><con:property><con:name>TestRequest</con:name><con:value>{     "ShortName":  "SR121",   "FullName": "Lavanya Murali",   "PhoneNo": "9090909090",   "Address": "Hyderabad" }</con:value></con:property></con:properties></con:testCase><con:testCase id="504a8c23-f595-4d63-9bf1-097bcd4db7c1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Employee" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Groovy Script - Test Data" id="a9e788db-d29e-4cdf-88b2-78d9d242f501"><con:settings/><con:config><script>
import jxl.* //Import Java Excel library
import jxl.write.*
import com.eviware.soapui.support.XmlHolder

def TestCase = context.testCase
def FilePath =  "C:\\Lavanya\\Official\\POCs\\TMW\\API Testing\\Final\\TMWDemo\\Rest Service\\TestData_GetEmployee.xls"
def count
def total

//XSSFWorkbook wb = new XSSFWorkbook (FilePath)
Workbook Workbook1 = Workbook.getWorkbook(new File(FilePath))
Sheet Sheet1 = Workbook1.getSheet(0)
def rowsCount = Sheet1.getRows()
def colsCount = Sheet1.getColumns()


PropertiesTestStep = TestCase.getTestStepByName("Properties")
count = PropertiesTestStep.getPropertyValue("Counter").toInteger()

//If Total records unknown (at start), get the row count from excel
if (PropertiesTestStep.getPropertyValue("Total").toString() == "")
    PropertiesTestStep.setPropertyValue("Total",Sheet1.getRows().toString())

count++


log.info (count)

//Read the excel data
Cell Field1 = Sheet1.getCell(0,count)



log.info("Count is " + count.toString() + ". Short Name: " + Field1.getContents())
Workbook1.close()

//Copy the excel test data to properties in Properties Test step
PropertiesTestStep.setPropertyValue("ShortName", Field1.getContents())
PropertiesTestStep.setPropertyValue("Counter", count.toString())

total = PropertiesTestStep.getPropertyValue("Total").toInteger()

if(count == total - 1)
{
	PropertiesTestStep.setPropertyValue("End","True")
}	



</script></con:config></con:testStep><con:testStep type="restrequest" name="Employee 1 - Request 1" id="dd8fd60e-fb41-4dba-a623-d5b818ba59cb"><con:settings/><con:config service="http://192.168.0.47:7090" resourcePath="/employee" methodName="Employee 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Employee 1 - Request 1" id="bb24afa2-1bd9-439d-8397-a015c9dddfcf" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestSuite#RestEndPointURL}</con:endpoint><con:request/><con:originalUri>http://192.168.0.47/employee</con:originalUri><con:assertion type="Simple Contains" id="6bdea8f8-3c97-4a6e-86c2-1c859beb91f9" name="Contains"><con:configuration><token>Senthil Sethuraman</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="5c3dcc0b-0152-4343-bb54-b6d77bb55a40" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" id="f2672f3c-7550-4785-b58e-f556b4a58dfa" name="Response SLA"><con:configuration><SLA>500</SLA></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="85ba0804-af14-4a9b-9100-d0017e46fb61" name="Script Assertion"><con:configuration><scriptText>//Paste the msg

def shortName = messageExchange.modelItem.testStep.testCase.getPropertyValue("ShortName")
def restEndPointURL = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("RestEndPointURL")

log.info context.expand( 'Short Name is ' + shortName )
 </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="shortname" value="${#TestCase#ShortName}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>shortname</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script - Data Loop" id="0bba554d-f557-48df-993d-cbaba9efb542"><con:settings/><con:config><script>def TestCase = context.testCase

PropertiesTestStep = TestCase.getTestStepByName("Properties")
Stop = PropertiesTestStep.getPropertyValue("End").toString()
if(Stop =="True")
{
	log.info("Exit Groovy Script - Data Loop")
	PropertiesTestStep.setPropertyValue("Total","")
	PropertiesTestStep.setPropertyValue("ShortName", "")
	PropertiesTestStep.setPropertyValue("Counter", "0")
	PropertiesTestStep.setPropertyValue("End", "False")

}
else
	testRunner.gotoStepByName("Groovy Script - Test Data")</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="5b62f105-9b1a-49c7-ad9b-c7661958811c"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>Counter</con:name><con:value>0</con:value></con:property><con:property><con:name>Total</con:name><con:value/></con:property><con:property><con:name>End</con:name><con:value>False</con:value></con:property><con:property><con:name>ShortName</con:name><con:value/></con:property></con:properties></con:config></con:testStep><con:tearDownScript>// Code to execute the GenerateCSVReport test step
testRunner.testCase.testSuite.project.testSuites["Library"].testCases["Reporting_Utility"].
testSteps["GenerateCSVReport"].run(testRunner, context);</con:tearDownScript><con:properties><con:property><con:name>ShortName</con:name><con:value>SS298</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>RestEndPointURL</con:name><con:value>http://192.168.0.47:7090</con:value></con:property></con:properties></con:testSuite><con:testSuite id="4751557b-ced9-4c43-8995-2ca4b3c03e9b" name="Library" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="7ff556e9-ce66-4c0f-804c-6192d690917b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Reporting_Utility" searchProperties="true"><con:settings/><con:testStep type="groovy" name="GenerateCSVReport" id="3fd7b800-609d-431e-b649-d5c0fa716ae4"><con:settings/><con:config><script>// Try-catch block to handle exceptions
try {
// 1. Create a "SoapUIResults" folder in the project path 
      // Retrieve the project root folder
      def projectPath = new com.eviware.soapui.support.GroovyUtils(context).projectPath
      // Specify a folder inside project root to store the results
      String folderPath = projectPath + "/SoapUIResults";
      // Create a File object for the specified path
      def resultFolder = new File(folderPath);
      // Check for existence of folder and create a folder
      if(!resultFolder.exists())
      {
        resultFolder.mkdirs();
      }
/* ------------------------------------------------------------------------------- */
// 2. Create a subfolder (with timestamp) to store the request-response local copy 
      // Retrieve the latest execution date-time
      Date d = new Date();
      def executionDate = d.format("dd-MMM-yyyy HH_mm");
      // Specify the subfolder path with name Request-Response_CurrentTimeStamp
      String subfolderPath1 = folderPath+ "/Request-Response_"+executionDate;
      // Create this sub-folder
      new File(subfolderPath1).mkdirs();
/* ------------------------------------------------------------------------------- */
// 3. Create another subfolder "CSV Reports" to store the reports file 
      // Specify the subfolder path with name CSV Reports
      String subfolderPath2 = folderPath+ "/CSV Reports";
      // Create this sub-folder
      new File(subfolderPath2).mkdirs();
/* ------------------------------------------------------------------------------- */
// 4. Create a Report.csv file inside the CSV Reports folder 
      // Create a File object for Report csv file (with timestamp)
      def reportFile = new File(subfolderPath2, "Report_"+executionDate+".csv");
      // Check for existence of report file and create a file
      if(!reportFile.exists())
      {
        reportFile.createNewFile();
        // Create required column names in the report file
        reportFile.write('"Test Suite","Test Case","Test Step","Step Type","Step Status",'
                        +'"Result message","Execution Date"');
      }
/* ------------------------------------------------------------------------------- */
// 5. Inserting data in the file
      // Iterate over all the test steps results
  for(stepResult in testRunner.getResults())
  {
    // Retrieve Test Suite name
   def testSuite = testRunner.testCase.testSuite.name;
   // Retrieve Test Case name
   def testCase = testRunner.testCase.name;
   // Retrieve Test Step
   def testStep = stepResult.getTestStep();
   // Retrieve Test Step name
   def testStepName = testStep.name
   // Retrieve Test Step type
   def type = testStep.config.type
   // Retrieve Test Step status
   def status = stepResult.getStatus()
   // Creating new line in report file
   reportFile.append('\n');
   // Write all the necessary information in the file
   reportFile.append('"' + testSuite + '",');
   reportFile.append('"' + testCase + '",');
   reportFile.append('"' + testStepName + '",');
   reportFile.append('"' + type + '",');
   reportFile.append('"' + status + '",');
   // Retrieve the test result messages
   reportFile.append('"');
   for(resMessage in stepResult.getMessages())
   {
     // Write messages and separate multiple messages by new line
     reportFile.append('Message:' + resMessage + '\n');
   }
   reportFile.append('",');
   //Write executionDate in the file
   reportFile.append('"' + executionDate + '",');
/* ------------------------------------------------------------------------------- */
// 6. Extract the request and response and save it to external file
      // Verify if the test step type is request: SOAP project or restrequest: REST project
        if((type=="request").or(type=="restrequest"))
        {
          // Extract the request from the test step
          def extRequest = testStep.properties["Request"].value;    
      // Create a file in the reports folder and write the request
      // Naming convention: request_TestSuiteName_TestCaseName_TestStepName.txt
      def requestFile=subfolderPath1+"/request_"+testSuite+"_"+testCase+"_"+testStepName+".txt";
      def rqfile = new File(requestFile);
      rqfile.write(extRequest, "UTF-8");
      // Extract the response from the test step
      def extResponse = stepResult.getResponseContent();    
      // Create a file in the reports folder and write the response
      // Naming convention: response_TestSuiteName_TestCaseName_TestStepName.txt
      def responseFile=subfolderPath1+"/response_"+testSuite+"_"+testCase+"_"+testStepName+".txt";
      def rsfile = new File(responseFile);
      rsfile.write(extResponse, "UTF-8");
     }
   }
 }
catch(exc)
{
   log.error("Exception happened: " + exc.toString());
}</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>